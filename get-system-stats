#!/bin/bash

set -euo pipefail

#system requirements: linux2.6+, bash 4+, top, date

if [ "$(uname)" != "Linux" ]; then
    echo "$0 only supported in linux"
fi

proc="${1-"/proc"}"
cycle_s="${2-"-1"}"

function get_ms {
    echo "$(date +%s%3N)"
}

function log_value {
    name="$1"
    unit="$2"
    value="$3"

    if [ -z "$4" ]; then
        ms="$(get_ms)"
    else
        ms="$4"
    fi

    echo "__BASH_METRIC;$1:$2:$3:$4"
}

function ltrim {
    read temp
    echo "${temp##" "}"
}

function log_stats {
    # num_cores="$(grep 'core id' "$proc/cpuinfo" |sort -u |wc -l)"
    # num_virtual_cores=$(grep 'core id' "$proc/cpuinfo" |wc -l)

    ms="$(get_ms)"
    cpu_agg_levels="$(top -d 1 -b -n 2 | grep -E '^%Cpu' |tail -n1)"

    cpu_agg_idle_string="$([[ $cpu_agg_levels =~ ([0-9]+\.[0-9] id) ]] && echo $BASH_REMATCH)"
    cpu_agg_idle_float="$(echo $cpu_agg_idle_string | cut -d' ' -f1)"
    cpu_agg_idle_int="$(printf "%.0f" $cpu_agg_idle_float)"
    cpu_agg_used="$((100 - cpu_agg_idle_int))"

    log_value cpu_aggregate_normalized p "$cpu_agg_used" "$ms"

    ms="$(get_ms)"
    cpu_stat="$(cat "$proc/stat")"
    cpu_idle_userhz="$(echo "$cpu_stat" | grep -E '^cpu '  | tr -s ' ' |cut -d' ' -f5)"
    cpu_iowait_userhz="$(echo "$cpu_stat" | grep -E '^cpu ' | tr -s ' ' |cut -d' ' -f6)"
    cpu_processthread_count="$(echo "$cpu_stat" | grep -E '^processes' |cut -d' ' -f2)"

    log_value cpu_idle_userhz userhz $cpu_idle_userhz "$ms"
    log_value cpu_iowait_userhz userhz $cpu_iowait_userhz "$ms"
    log_value cpu_processthread c $cpu_processthread_count "$ms"

    ms="$(get_ms)"
    w_head="$(w |head -n1)"
    load_averages="$(echo "${w_head##*load average: }")"
    load_average_1="$(echo "$load_averages" |cut -d, -f1)"
    load_average_5="$(echo "$load_averages" |cut -d' ' -f2 |cut -d, -f1)"
    load_average_15="$(echo "$load_averages" |cut -d' ' -f3)"

    log_value load_average_1 g $load_average_1 "$ms"
    log_value load_average_5 g $load_average_5 "$ms"
    log_value load_average_15 g $load_average_15 "$ms"

    ms="$(get_ms)"
    memory_stats="$(free -b)"
    memory_used="$(echo "$memory_stats" | grep '^-/+' | tr -s ' ' | cut -d' ' -f3)"
    memory_available="$(echo "$memory_stats" | grep '^-/+' | tr -s ' ' | cut -d' ' -f4)"

    log_value memory_used B $memory_used "$ms"
    log_value memory_available B $memory_available "$ms"

    ms="$(get_ms)"
    vmstat_pageouts="$(grep -E '^pgpgout' "$proc/vmstat" |cut -d' ' -f2)"
    log_value vmstat_pageouts c $vmstat_pageouts "$ms"

    ms="$(get_ms)"
    root_disk_info="$(df /)"
    root_disk_used="$(echo "$root_disk_info" | tail -n1 |tr -s ' ' |cut -d' ' -f3)"
    root_disk_free="$(echo "$root_disk_info" | tail -n1 |tr -s ' ' |cut -d' ' -f4)"

    log_value root_disk_used KiB $root_disk_used "$ms"
    log_value root_disk_free KiB $root_disk_free "$ms"

    ms="$(get_ms)"
    sda_stats="$(grep sda "$proc/diskstats" |head -n1 | ltrim)"
    sda_reads="$(echo "$sda_stats" | tr -s ' ' |cut -d' ' -f5)"
    sda_writes="$(echo "$sda_stats" | tr -s ' ' |cut -d' ' -f9)"
    sda_io_queued="$(echo "$sda_stats" | tr -s ' ' |cut -d' ' -f13)"

    log_value sda_reads c $sda_reads "$ms"
    log_value sda_writes c $sda_writes "$ms"
    log_value sda_io_queued c $sda_io_queued "$ms"

    ms="$(get_ms)"
    eth0_stats="$(grep eth0: "$proc/1/net/dev" | ltrim)"
    eth0_received_bytes="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f2)"
    eth0_received_packets="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f3)"
    eth0_received_errors="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f4)"
    eth0_transmitted_bytes="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f10)"
    eth0_transmitted_packets="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f11)"
    eth0_transmitted_errors="$(echo "$eth0_stats" |tr -s ' ' |cut -d' ' -f12)"

    log_value eth0_received_aggregate B $eth0_received_bytes "$ms"
    log_value eth0_received_packet c $eth0_received_packets "$ms"
    log_value eth0_received_error c $eth0_received_errors "$ms"
    log_value eth0_transmitted_aggregate B $eth0_transmitted_bytes "$ms"
    log_value eth0_transmitted_packet c $eth0_transmitted_packets "$ms"
    log_value eth0_transmitted_error c $eth0_transmitted_errors "$ms"
}

log_stats

if [ "$cycle_s" -gt "-1" ]; then
    while [ 0 ]; do
        sleep "$cycle_s"
        log_stats
    done
fi